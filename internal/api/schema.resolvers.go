package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/ary82/microservices/internal/api/gql"
	"github.com/ary82/microservices/internal/api/gqlmodel"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input gqlmodel.NewUser) (*gqlmodel.User, error) {
	panic(fmt.Errorf("not implemented: RegisterUser - registerUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input gqlmodel.Login) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input gqlmodel.CreateProduct) (*gqlmodel.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateInventory is the resolver for the updateInventory field.
func (r *mutationResolver) UpdateInventory(ctx context.Context, input gqlmodel.UpdateInventory) (*gqlmodel.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateInventory - updateInventory"))
}

// PlaceOrder is the resolver for the placeOrder field.
func (r *mutationResolver) PlaceOrder(ctx context.Context, input gqlmodel.PlaceOrder) (*gqlmodel.Order, error) {
	panic(fmt.Errorf("not implemented: PlaceOrder - placeOrder"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*gqlmodel.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*gqlmodel.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context) (*gqlmodel.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*gqlmodel.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context) (*gqlmodel.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*gqlmodel.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

// Query returns gql.QueryResolver implementation.
func (r *Resolver) Query() gql.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
