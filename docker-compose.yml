services:
  graphql-api:
    build:
      dockerfile: ./cmd/api/Dockerfile
      context: .
    env_file:
      - .env.docker
    ports:
      - "8080:8080"
    depends_on:
      - user
      - product
      - order
    restart: always

  user:
    build:
      dockerfile: ./cmd/user-service/Dockerfile
    env_file:
      - .env.docker
    ports:
      - "8001:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      pg-user:
        condition: service_healthy
    restart: always

  product:
    build:
      dockerfile: ./cmd/product-service/Dockerfile
    env_file:
      - .env.docker
    ports:
      - "8002:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      pg-product:
        condition: service_healthy
    restart: always

  order:
    build:
      dockerfile: ./cmd/order-service/Dockerfile
    env_file:
      - .env.docker
    ports:
      - "8003:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      pg-order:
        condition: service_healthy
    restart: always

  rabbitmq:
    hostname: "rabbit"
    image: rabbitmq:4.0-management-alpine
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  pg-user:
    image: postgres:17.0-alpine
    environment:
      POSTGRES_PASSWORD: abc
    ports:
      - "5433:5432"
    volumes:
      - ./migrations/init_users.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  pg-product:
    image: postgres:17.0-alpine
    environment:
      POSTGRES_PASSWORD: abc
    ports:
      - "5434:5432"
    volumes:
      - ./migrations/init_products.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  pg-order:
    image: postgres:17.0-alpine
    environment:
      POSTGRES_PASSWORD: abc
    ports:
      - "5435:5432"
    volumes:
      - ./migrations/init_orders.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
